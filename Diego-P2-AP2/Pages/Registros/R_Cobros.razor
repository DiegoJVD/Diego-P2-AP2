@page "/R_Cobros"

@inject IToastService Toast

<EditForm Model="cobro" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card">
            <div class="card-header">
                Registro de Cobros
            </div>
            <div class="card-body">
                <form>
                    <div class="form-group">
                        <label> Id:</label>
                        <div class="input-group">
                            <InputNumber @bind-Value="cobro.CobroId" class="form-control " />
                            <div class="input-group-append" display: inline-block>
                                <button type="button" class="btn btn-warning" @onclick="Nuevo">
                                    <i class="oi oi-magnifying-glass mr-2" /> Buscar
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Fecha:</label>
                        <InputDate @bind-Value="cobro.Fecha" class="form-control " readonly />
                        <ValidationMessage For="@(() => cobro.Fecha)" />

                    </div>
                    <div class="form-group">
                        <label>Cliente: </label>
           
                        <select class="form-control" @bind="clienteSeleccionado" @onclick="llenandoDetalle">
                            <option value="0" disabled selected>Seleccione un cliente</option>
                            @foreach (var cliente in ClientesList)
                            {
                    <option value="@cliente.ClienteId">@cliente.Nombres</option>}
                        </select>
                       
                    </div>

                    <div class="card" style=" color: black; border-width: 3px">
                        <div class="card-header">Facturas Vencidas</div>
                        <div class="card-body">


                            <div class="table" style=" height:200px; overflow: auto; display: block;">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th>Id:</th>
                                            <th>Fecha:</th>
                                            <th>Monto:</th>
                                            <th>Balance</th>
                                            <th>Cobrado</th>
                                            <th>Pagar</th>
                                        </tr>
                                    </thead>
                                    <tbody class="text-body">

                                    @foreach (var item in cobro.Detalle)
                                    {

                                            <tr>
                                                <td>@item.VentaId</td>
                                                <td>@item.Venta.Fecha</td>
                                                <td>@item.Venta.Monto</td>
                                                <td>@item.Venta.Balance</td>
                                                <td>@item.Cobrado</td>
                                                <td>
                                                    <input class="form-check-input"
                                                           type="checkbox"
                                                           id="flexCheckDefault"
                                                           style="margin-left:25px" 
                                                           @onchange="eventArgs => {
                                                    Cobrar(item.Venta, eventArgs.Value); 
                                                    }"/>
                                                </td>
                                            </tr>
                                    }

                                        </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                    <div>
                        <label class="form-control">Total:</label>
                        <span class="@cobro.Detalle.Count"></span>
                       
                    </div>
                    
                    <div>
                        <label class="form-control">Observaciones:</label>
                        <textarea class="col-lg-12" @bind="cobro.Observaciones"></textarea>
                    </div>
                </form>
            </div>

            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-lg btn-primary">
                        <i class="oi oi-file mr-2" />Nuevo
                    </button>
                    <button type="submit" class="btn btn-lg btn-success">
                        <i class="oi oi-account-login" style="transform:rotate(90deg)" /> Guardar
                    </button>
                    <button type="button" class="btn btn-lg btn-danger">
                        <i class="oi oi-trash mr-2" />Eliminar
                    </button>
                </div>
            </div>
        </div>
    </div>
</EditForm>


@code
{
    private Cobros cobro = new Cobros();

    public int clienteSeleccionado { get; set; }

    Clientes cliente = new Clientes();

    List<Clientes> ClientesList = new List<Clientes>();

    List<CobrosDetalle> Detalle = new List<CobrosDetalle>();


    protected override void OnInitialized()
    {
        Nuevo();
    }


    public void Nuevo()
    {
        clienteSeleccionado = 0;

        ClientesList = ClientesBLL.GetList();
        cobro = new Cobros();

    }

    public void llenandoDetalle()
    {
        if(ClientesBLL.Buscar(clienteSeleccionado) != null)
        {
            cobro.Detalle = CobrosBLL.ObtenerDetalle(clienteSeleccionado);
        }


    }

    public void Cobrar(Ventas venta, object valor)
    {
        var detalle = cobro.Detalle.Find(d => d.VentaId == venta.VentaId);

        if (detalle != null && (bool)valor)
            detalle.Cobrado = venta.Balance;
        else
            detalle.Cobrado = 0;
    }

    public void Guardar()
    {
        bool Guardado;

        cobro.ClienteId = clienteSeleccionado;

        cobro.Detalle.RemoveAll(p => p.Cobrado == 0);

        Guardado = CobrosBLL.Guardar(cobro);

        if (Guardado)
        {
            Nuevo();
            Toast.ShowSuccess("Cobro guardada correctamente");
        }
        else
            Toast.ShowError("No se pudo guardar el Cobro");
    }



}
